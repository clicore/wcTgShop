import base64
import json
import random
from aiogram.dispatcher import FSMContext, filters
from aiogram.types import CallbackQuery, Message
from aiohttp import web
from loader import dp, bot, routes, liqpay, wcapi
import config
from states import States
from keyboards import payment_keyboard, back_keyboard, getphone_keyboard
from handlers import start


@dp.callback_query_handler(text="order", state='*')
async def makeOrder(query: CallbackQuery, state=FSMContext):
    await States.Order.set()
    async with state.proxy() as proxy:
        proxy.update({"payment": {
            "amount": "0",
            "card": "",
            "card_exp_month": "",
            "card_exp_year": "",
            "card_cvv": ""
        }})
        if proxy["order"]["line_items"]:
            for i, item in enumerate(proxy["order"]["line_items"]):
                product = wcapi.get(f"products/{item['product_id']}").json()
                proxy["payment"]["amount"] = str(float(proxy["payment"]["amount"]) + (float(product["price"]) * item["quantity"]))
        if float(proxy["payment"]["amount"]) > 0:
            await query.message.answer(f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ ${proxy['payment']['amount']}\n\n"
                                       "üî∏ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
                                       "üî∏ –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω!\n\n"
                                       "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è?",
                                       reply_markup=back_keyboard.back_button)
            await States.next()
        else:
            await query.answer("–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏!")
    await query.answer()

@dp.message_handler(filters.Text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω"), state='*')
@dp.message_handler(filters.Text("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"), state='*')
async def toStore(message: Message):
    await start.start(message)

@dp.message_handler(state=States.GetName)
async def getName(message: Message, state=FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await start.start(message)
    else:
        await States.next()
        async with state.proxy() as proxy:
            proxy["order"]["billing"]["first_name"] = message.text
            proxy["order"]["shipping"]["first_name"] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é?", reply_markup=back_keyboard.cancel_order)

@dp.message_handler(state=States.GetLastName)
async def getLastName(message: Message, state=FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await States.previous()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è?", reply_markup=back_keyboard.back_button)
    else:
        await States.next()
        async with state.proxy() as proxy:
            proxy["order"]["billing"]["last_name"] = message.text
            proxy["order"]["shipping"]["last_name"] = message.text
        await message.answer("–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?", reply_markup=getphone_keyboard.keyboard)


@dp.message_handler(content_types="contact", state=States.GetPhone)
async def getPhone(message: Message, state=FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await States.previous()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é?", reply_markup=back_keyboard.cancel_order)
    else:
        await States.next()
        async with state.proxy() as proxy:
            proxy["order"]["billing"]["phone"] = message.contact.phone_number
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?", reply_markup=payment_keyboard.keyboard)

@dp.message_handler(state=States.PaymentChoice)
async def paymentChoice(message: Message, state=FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await States.previous()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?", reply_markup=back_keyboard.cancel_order)
    else:
        async with state.proxy() as proxy:
            if message.text == "–ü—Ä–∏–≤–∞—Ç24":
                proxy["order"]["payment_method_title"] = "LiqPay Invoice Bot"
                order = wcapi.post("orders", proxy["order"]).json()
                payment = liqpay.api("request", {
                    "action": "invoice_bot",
                    "version": "3",
                    "amount": proxy["payment"]["amount"],
                    "currency": "USD",
                    "order_id": str(random.randint(10000000, 99999999)),
                    "phone": proxy["order"]["billing"]["phone"],
                    "description": str(order["id"]),
                    "server_url": config.SERVER_URL.replace("https", "http") + "/callback"
                })
                if payment["result"] == "ok":
                    proxy["order"] = {}
                    await state.finish()
                    await message.answer("–ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ü—Ä–∏–≤–∞—Ç24. "
                                         "–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂!")
                else:
                    wcapi.delete("orders/" + str(order["id"]), params={"force": True}).json()
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!")
            if message.text == "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π":
                proxy["order"]["payment_method_title"] = "LiqPay Pay"
                await States.next()
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã?", reply_markup=back_keyboard.cancel_order)
            if message.text == "–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏":
                order = wcapi.post("orders", proxy["order"]).json()
                await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑!\n\n"
                                     f"–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {order['number']}\n\n"
                                     "–ù–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –±–ª–∏–∂–∞–π—à–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π. "
                                     "–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –Ω–∞ —Å–ª—É—á–∞–π –∫–∞–∫–∏—Ö –ª–∏–±–æ –æ—à–∏–±–æ–∫!",
                                     reply_markup=back_keyboard.to_store)
                proxy["order"] = {}
                await state.finish()

@dp.message_handler(state=States.GetCard)
async def getCard(message: Message, state=FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await States.previous()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã?", reply_markup=payment_keyboard.keyboard)
    else:
        await States.next()
        async with state.proxy() as proxy:
            proxy["payment"]["card"] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –≤ —Ç–∞–∫–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ –±–µ—Ö –ø—Ä–æ–±–µ–ª–æ–≤(–Ω–∞–ø—Ä–∏–º–µ—Ä 09/22)?")

@dp.message_handler(state=States.GetCardDate)
async def getCardMonth(message: Message, state=FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await States.previous()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã?", reply_markup=back_keyboard.cancel_order)
    else:
        await States.next()
        async with state.proxy() as proxy:
            proxy["payment"]["card_exp_month"] = message.text[0:2]
            proxy["payment"]["card_exp_year"] = message.text[3:len(message.text)]
        await message.answer("–í–≤–µ–¥–∏—Ç–µ CVV –∫–æ–¥ –∫–∞—Ä—Ç—ã?")

@dp.message_handler(state=States.GetCVV)
async def getCardCVV(message: Message, state=FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await States.previous()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –≤ —Ç–∞–∫–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ –±–µ—Ö –ø—Ä–æ–±–µ–ª–æ–≤(–Ω–∞–ø—Ä–∏–º–µ—Ä 09/22)?")
    else:
        async with state.proxy() as proxy:
            proxy["payment"]["card_cvv"] = message.text
            order = wcapi.post("orders", proxy["order"]).json()
            payment = liqpay.api("request", {
                "action": "pay",
                "version": "3",
                "phone": proxy["order"]["billing"]["phone"],
                "amount": proxy["payment"]["amount"],
                "currency": "USD",
                "description": str(order["id"]),
                "order_id": str(random.randint(10000000, 99999999)),
                "card": proxy["payment"]["card"],
                "card_exp_month": proxy["payment"]["card_exp_month"],
                "card_exp_year": proxy["payment"]["card_exp_year"],
                "card_cvv": proxy["payment"]["card_cvv"],
                "server_url": config.SERVER_URL.replace("https", "http") + "/callback"
            })
            if payment["result"] == "ok":
                proxy["order"] = {}
                await state.finish()
            else:
                wcapi.delete("orders/" + str(order["id"]), params={"force": True}).json()
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!")

@routes.post('/callback')
async def liqpayCallback(request: web.Request):
    body = await request.post()
    sign = liqpay.str_to_sign(config.LIQPAY_PRIVATE + body.get("data") + config.LIQPAY_PRIVATE)
    if sign.decode("utf8") == body.get("signature"):
        data = json.loads(base64.b64decode(body.get("data")).decode('utf-8'))
        wcapi.post("orders/"+str(data["description"]), {"status": "processing"})
        order = wcapi.get("orders/"+str(data["description"])).json()
        await bot.send_message(order["meta_data"][0]["value"], "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑!\n\n"
                                     f"–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {order['number']}\n\n"
                                     "–ù–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –±–ª–∏–∂–∞–π—à–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π. "
                                     "–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –Ω–∞ —Å–ª—É—á–∞–π –∫–∞–∫–∏—Ö –ª–∏–±–æ –æ—à–∏–±–æ–∫!",
                                     reply_markup=back_keyboard.to_store)
    return web.Response(text=sign.decode("utf8"))